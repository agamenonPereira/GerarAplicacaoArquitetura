using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;



using {{Sistema}}.Application.IServices;
using {{Sistema}}.Application.Services;
using {{Sistema}}.Application.ValidationsServices.Boletas;
using {{Sistema}}.Application.ValidationsServices.Boletas.Interfaces;
using {{Sistema}}.Domain.CommandHandlers;
using {{Sistema}}.Domain.Commands;

using {{Sistema}}.Domain.Core.Bus;
using {{Sistema}}.Domain.Core.Events;
using {{Sistema}}.Domain.Core.Notifications;
using {{Sistema}}.Domain.EventHandlers;
using {{Sistema}}.Domain.EventHandlers.FeriadoNacional;
using {{Sistema}}.Domain.EventHandlers.PldSemanalPorPatamares;
using {{Sistema}}.Domain.Events;
using {{Sistema}}.Domain.Events.FeriadosNacionais;
using {{Sistema}}.Domain.Events.PldSemanalPorPatamares;
using {{Sistema}}.Domain.Interfaces;
using {{Sistema}}.Domain.Interfaces.AgentesCCEE;
using {{Sistema}}.Domain.Interfaces.FeriadosNacionais;
using {{Sistema}}.Domain.Interfaces.PldSemanalPatamares;
using {{Sistema}}.Infra.CrossCutting.Bus;
using {{Sistema}}.Infra.CrossCutting.Identity.Authorization;
using {{Sistema}}.Infra.CrossCutting.Identity.Data;
using {{Sistema}}.Infra.CrossCutting.Identity.Models;
using {{Sistema}}.Infra.CrossCutting.Identity.Services;
using {{Sistema}}.Infra.Data.Context;
using {{Sistema}}.Infra.Data.EventSourcing;
using {{Sistema}}.Infra.Data.Repositories;
using {{Sistema}}.Infra.Data.Repositories.EventSourcing;
using {{Sistema}}.Infra.Data.Repositories.FeriadosNacionais;
using {{Sistema}}.Infra.Data.Repositories.PldSemanalPorPatamares;
using {{Sistema}}.Infra.Data.UoW;
using {{Sistema}}.Infra.ImportExportData.Exportacao.IService;
using {{Sistema}}.Infra.ImportExportData.Exportacao.Service;
using {{Sistema}}.Infra.ImportExportData.Importacao.IService;
using {{Sistema}}.Infra.ImportExportData.Importacao.Service;

namespace {{Sistema}}.Infra.CrossCutting.IoC
{
    public class RegisterServices
    {
        public static void Registrar(IServiceCollection services)
        {
            // ASP.NET HttpContext dependency
            services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();

            // Domain Bus (Mediator)
            services.AddScoped<IMediatorHandler, InMemoryBus>();
            
            // ASP.NET Authorization Polices
            services.AddSingleton<IAuthorizationHandler, ClaimsRequirementHandler>();
            
            // Application 
            services.AddScoped<IAgenteCCEEAppService, AgenteCCEEAppService>();
            services.AddScoped<IEmpresaAppService, EmpresaAppService>();
            services.AddScoped<IParametroAcessoBBCEAppService, ParametroAcessoBBCEAppService>();
            services.AddScoped<ITipoDeGarantiaAppService, TipoDeGarantiaAppService>();
            services.AddScoped<IFonteDeEnergiaAppService, FonteDeEnergiaAppService>();
            services.AddScoped<ISubmercadoAppService, SubmercadoAppService>();
            services.AddScoped<IClassificacaoDaOperacaoAppService, ClassificacaoDaOperacaoAppService>();
            services.AddScoped<IOrigemDaOperacaoAppService, OrigemDaOperacaoAppService>();
            services.AddScoped<ITipoDaOperacaoAppService, TipoDaOperacaoAppService>();
            services.AddScoped<ITipoDeVolumeAppService, TipoDeVolumeAppService>();
            services.AddScoped<ITipoDePrecoAppService, TipoDePrecoAppService>();
            services.AddScoped<ITipoDeFlexibilidadeAppService, TipoDeFlexibilidadeAppService>();
            services.AddScoped<ITipoDeModulacaoAppService, TipoDeModulacaoAppService>();
            services.AddScoped<IIndicadorEconomicoAppService, IndicadorEconomicoAppService>();
            services.AddScoped<IMesBaseParaVencimentoAppService, MesBaseParaVencimentoAppService>();
            services.AddScoped<IMesBaseParaFaturamentoAppService, MesBaseParaFaturamentoAppService>();
            services.AddScoped<IMoedaAppService, MoedaAppService>();
            services.AddScoped<IBoletaFechadaAppService, BoletaFechadaAppService>();
            services.AddScoped<ISituacaoDaBoletaAppService, SituacaoDaBoletaAppService>();
            services.AddScoped<IImportarBoletaBBCEAppService, ImportarBoletaBBCEAppService>();
            services.AddScoped<ITipoDePropostaAppService, TipoDePropostaAppService>();
            services.AddScoped<IBoletaPropostaAppService, BoletaPropostaAppService>();            
            services.AddScoped<IPldSemanalPorPatamarAppService, PldSemanalPorPatamarAppService>();            
            services.AddScoped<IFeriadoNacionalAppService, FeriadoNacionalAppService>();
            services.AddScoped<IPldMensalPorSubmercadoAppService, PldMensalPorSubmercadoAppService>();

            // ----------------------------------------------------------------------------------
            // Domain - Events
            // ----------------------------------------------------------------------------------
            // DOMAIN NOTIFICATIONS;
            services.AddScoped<INotificationHandler<DomainNotification>, DomainNotificationHandler>();

            // EMPRESAS;
            services.AddScoped<INotificationHandler<EmpresaIncluidaEvent>, EmpresaEventHandler>();
            services.AddScoped<INotificationHandler<EmpresaAlteradaEvent>, EmpresaEventHandler>();
            services.AddScoped<INotificationHandler<EmpresaExcluidaEvent>, EmpresaEventHandler>();

            // PARAMETROS ACESSO BBCE;
            services.AddScoped<INotificationHandler<ParametroAcessoBBCEIncluidoEvent>, ParametroAcessoBBCEEventHandler>();
            services.AddScoped<INotificationHandler<ParametroAcessoBBCEAlteradoEvent>, ParametroAcessoBBCEEventHandler>();
            services.AddScoped<INotificationHandler<ParametroAcessoBBCEExcluidoEvent>, ParametroAcessoBBCEEventHandler>();

            // BOLETA EFETIVA;
            services.AddScoped<INotificationHandler<BoletaFechadaIncluidaEvent>, BoletaFechadaEventHandler>();
            services.AddScoped<INotificationHandler<BoletaFechadaValidadaEvent>, BoletaFechadaEventHandler>();

            // BOLETA EFETIVA BBCE;
            services.AddScoped<INotificationHandler<BoletaFechadaBBCEIncluidaEvent>, BoletaFechadaBBCEEventHandler>();

            // BOLETA PROPOSTA;
            services.AddScoped<INotificationHandler<BoletaPropostaIncluidaEvent>, BoletaPropostaEventHandler>();
            services.AddScoped<INotificationHandler<BoletaPropostaConvertidaEmEfetivaEvent>, BoletaPropostaEventHandler>();
            services.AddScoped<INotificationHandler<BoletaPropostaCanceladaEvent>, BoletaPropostaEventHandler>();
            services.AddScoped<INotificationHandler<BoletaPropostaAlteradaEvent>, BoletaPropostaEventHandler>();
            
            // FERIADO NACIONAL
            services.AddScoped<INotificationHandler<FeriadoNacionalIncluidoEvent>, FeriadoNacionalEventHandler>();
            services.AddScoped<INotificationHandler<FeriadoNacionalAlteradoEvent>, FeriadoNacionalEventHandler>();

            // PLD SEMANAL POR PATAMARES
            services.AddScoped<INotificationHandler<PldSemanalPorPatamarIncluidoEvent>, PldSemanalPorPatamarEventHandler>();
            services.AddScoped<INotificationHandler<PldSemanalPorPatamarAlteradoEvent>, PldSemanalPorPatamarEventHandler>();
            
            // ----------------------------------------------------------------------------------
            // Domain - Commands
            // ----------------------------------------------------------------------------------
            // EMPRESAS;
            services.AddScoped<IRequestHandler<IncluirEmpresaCommand, HandleResult>, EmpresaCommandHandler>();
            services.AddScoped<IRequestHandler<AlterarEmpresaCommand, HandleResult>, EmpresaCommandHandler>();
            services.AddScoped<IRequestHandler<ExcluirEmpresaCommand, HandleResult>, EmpresaCommandHandler>();

            // PARAMETROS ACESSO BBCE;
            services.AddScoped<IRequestHandler<IncluirParametroAcessoBBCECommand, HandleResult>, ParametroAcessoBBCECommandHandler>();
            services.AddScoped<IRequestHandler<AlterarParametroAcessoBBCECommand, HandleResult>, ParametroAcessoBBCECommandHandler>();
            services.AddScoped<IRequestHandler<ExcluirParametroAcessoBBCECommand, HandleResult>, ParametroAcessoBBCECommandHandler>();

            // BOLETA EFETIVA;
            services.AddScoped<IRequestHandler<IncluirBoletaFechadaCommand, HandleResult>, BoletaFechadaCommandHandler>();
            services.AddScoped<IRequestHandler<ValidarBoletaFechadaCommand, HandleResult>, BoletaFechadaCommandHandler>();

            // BOLETA PROPOSTA;
            services.AddScoped<IRequestHandler<IncluirBoletaPropostaCommand, HandleResult>, BoletaPropostaCommandHandler>();
            services.AddScoped<IRequestHandler<ConverterBoletaPropostaEmBoletaEfetivaCommand, HandleResult>, BoletaPropostaCommandHandler>();
            services.AddScoped<IRequestHandler<CancelarBoletaPropostaCommand, HandleResult>, BoletaPropostaCommandHandler>();
            services.AddScoped<IRequestHandler<AlterarBoletaPropostaCommand, HandleResult>, BoletaPropostaCommandHandler>();

            // BOLETA EFETIVA BBCE;
            services.AddScoped<IRequestHandler<IncluirBoletaFechadaBBCECommand, HandleResult>, BoletaFechadaBBCECommandHandler>();

            // FERIADO NACIONAL
            services.AddScoped<IRequestHandler<IncluirFeriadoNacionalCommand, HandleResult>, FeriadoNacionalCommandHandler>();
            services.AddScoped<IRequestHandler<AlterarFeriadoNacionalCommand, HandleResult>, FeriadoNacionalCommandHandler>();
            services.AddScoped<IRequestHandler<ListaFeriadoNacionalCommand, HandleResult>, FeriadoNacionalCommandHandler>();

            // PLD SEMANAL POR PATAMARES
            services.AddScoped<IRequestHandler<IncluirPldSemanalPorPatamarCommand, HandleResult>, PldSemanalPorPatamarCommandHandler>();
            services.AddScoped<IRequestHandler<AlterarPldSemanalPorPatamarCommand, HandleResult>, PldSemanalPorPatamarCommandHandler>();
            services.AddScoped<IRequestHandler<ListaPldSemanalPorPatamarCommand, HandleResult>, PldSemanalPorPatamarCommandHandler>();

            // PLD MENSAL POR SUBMERCADO;
            services.AddScoped<IRequestHandler<IncluirPldMensalPorSubmercadoCommand, HandleResult>, PldMensalPorSubmercadoCommandHandler>();
            services.AddScoped<IRequestHandler<AlterarPldMensalPorSubmercadoCommand, HandleResult>, PldMensalPorSubmercadoCommandHandler>();
            services.AddScoped<IRequestHandler<ExcluirPldMensalPorSubmercadoCommand, HandleResult>, PldMensalPorSubmercadoCommandHandler>();


            // ----------------------------------------------------------------------------------
            // Domain - ValidationServices
            // ----------------------------------------------------------------------------------
            services.AddScoped<IValidationBoletaService, ValidationBoletaService>();


            // ----------------------------------------------------------------------------------
            // Infra - Data
            // ----------------------------------------------------------------------------------
            services.AddScoped<IAgenteCCEERepository, AgenteCCEERepository>();
            services.AddScoped<ICategoriaDoPerfilDeAgenteCCEERepository, CategoriaDoPerfilDeAgenteCCEERepository>();
            services.AddScoped<IClasseDoPerfilDeAgenteCCEERepository, ClasseDoPerfilDeAgenteCCEERepository>();
            services.AddScoped<IPerfilDoAgenteCCEERepository, PerfilDoAgenteCCEERepository>();
            services.AddScoped<IEmpresaRepository, EmpresaRepository>();
            services.AddScoped<IParametroAcessoBBCERepository, ParametroAcessoBBCERepository>();
            services.AddScoped<IFonteDeEnergiaRepository, FonteDeEnergiaRepository>();
            services.AddScoped<ISubmercadoRepository, SubmercadoRepository>();
            services.AddScoped<ITipoDeGarantiaRepository, TipoDeGarantiaRepository>();
            services.AddScoped<IIndicadorEconomicoRepository, IndicadorEconomicoRepository>();
            services.AddScoped<IBoletaFechadaRepository, BoletaFechadaRepository>();
            services.AddScoped<IImportarBoletaBBCERepository, ImportarBoletaBBCERepository>();
            services.AddScoped<IBoletaPropostaRepository, BoletaPropostaRepository>();
            services.AddScoped<IFeriadoNacionalRepository, FeriadoNacionalRepository>();
            services.AddScoped<IPldSemanalPorPatamarRepository, PldSemanalPorPatamarRepository>();
            services.AddScoped<IPldMensalPorSubmercadoRepository, PldMensalPorSubmercadoRepository>();

            services.AddScoped<IImportacao, Importacao>();
            services.AddScoped<IUnitOfWork, UnitOfWork>();
            services.AddScoped<IExportacao, Exportacao>();
            //            services.AddScoped<{{Sistema}}Context>();
            services.AddDbContext<{{Sistema}}Context>();
//            services.AddScoped<ApplicationDbContext>();
            services.AddDbContext<ApplicationDbContext>();

            // ----------------------------------------------------------------------------------
            // Infra - Data EventSourcing
            // ----------------------------------------------------------------------------------
            services.AddScoped<IEventStoreRepository, EventStoreSQLRepository>();
            services.AddScoped<IEventStore, SqlEventStore>();
            //            services.AddScoped<EventStoreSQLContext>();
            services.AddDbContext<EventStoreSQLContext>();

            // ----------------------------------------------------------------------------------
            // Infra - Identity Services
            // ----------------------------------------------------------------------------------
            services.AddTransient<IEmailSender, AuthEmailMessageSender>();
            services.AddTransient<ISmsSender, AuthSMSMessageSender>();

            // ----------------------------------------------------------------------------------
            // Infra - Identity
            // ----------------------------------------------------------------------------------
            services.AddScoped<IUser, AspNetUser>();

        }
    }
}
